-
  1.A.10. If the follow-up requires a manual action, the field ‘Follow-Up Responsible’ in 
          the account.invoice must be set with the responsible that was indicated
          in the corresponding follow-up level.
-
  !python {model: account.invoice}: |
    print 'Starting the test 1.A.10.'
    cr.execute("SAVEPOINT test;")

-
  1.A.10. Creates an invoice with one line.
-
  !record {model: account.invoice, id: account_invoice_1_A_10}:
    partner_id: base.res_partner_2
    journal_id: account.sales_journal
    account_id: account.a_recv
    date_due: !eval datetime.today().strftime("%Y-%m-%d")
    invoice_line:
      - product_id: product.product_product_48
        name: 'USB Adapter'
        quantity: 18.0
        uos_id: product.product_uom_unit
        price_unit: 5.0

-
  1.A.10. Gets the delay of the first follow-up level and sets the due date of the invoice to be just that delay.
         Also sets a manual action to be performed associated to that follow-up level.
-
  !python {model: followup.level}: |
    from openerp import SUPERUSER_ID
    from datetime import datetime, timedelta
    # Gets the follow-up levels associated to the company of the admin.
    superuser_id = self.pool.get('res.users').search(cr, uid, [('id', '=', SUPERUSER_ID)], limit=1, context=context)[0]
    company_id = self.pool.get('res.company').search(cr, uid, [('id', '=', superuser_id)], limit=1, context=context)[0]
    followup_config_id = self.pool.get('followup.config').search(cr, uid, [('company_id', '=', company_id)], context=context)[0]
    followup_level_ids = self.pool.get('followup.level').search(cr, uid, [('followup_config_id', '=', followup_config_id)], context=context)

    # Stores the ID of the first follow-up level.
    context['first_followup_level'] = followup_level_ids[0]

    # Sets a manual action associated to this follow-up level.
    context['manual_action_responsible_id'] = self.pool.get('res.users').search(cr, uid, [('name', '=', 'Demo User')], limit=1, context=context)[0]
    context['manual_action_note'] = 'Call the customer.'
    followup_level_obj = self.pool.get('followup.level').browse(cr, uid, followup_level_ids[0], context=context)
    followup_level_obj.write({'manual_action': True,
                              'manual_action_responsible_id': context['manual_action_responsible_id'],
                              'manual_action_note': context['manual_action_note']})

    # Gets the delay of the first follow-up level (they are sorted).
    delay = self.pool.get('followup.level').browse(cr, uid, followup_level_ids[0], context=context).delay
    context['followup_level_delay'] = delay

    # Gets the invoice
    invoice_obj = self.pool.get('account.invoice').browse(cr, uid, ref('account_invoice_1_A_10'))

    # Sets the delay of the invoice to be just one day before the day in which the first follow-up level applies.
    new_due_date = (datetime.now() - timedelta(delay)).strftime("%Y-%m-%d")
    invoice_obj.write({'date_due': new_due_date, 'payment_term': None})

-
  1.A.10. Checks if the state of the newly created invoice is in state 'draft'.
-
  !assert {model: account.invoice, id: account_invoice_1_A_10, string: '1.A.10. State should be in state draft.'}:
    - state == 'draft'

-
  1.A.10. Validates invoice by clicking on the 'Validate' button.
-
  !workflow {model: account.invoice, action: invoice_open, ref: account_invoice_1_A_10}

-
  1.A.10. Checks if the state of the newly created invoice is in state 'open'.
-
  !assert {model: account.invoice, id: account_invoice_1_A_10, string: '1.A.10. State should be in state open.'}:
    - state == 'open'

-
  1.A.10. Checks if the due days of the opened invoice is exactly the delay of the first follow-up level.
-
  !python {model: account.invoice}: |
    invoice_obj = self.browse(cr, uid, ref('account_invoice_1_A_10'))
    assert(invoice_obj.follow_up_date_due_days == context['followup_level_delay']), ("1.A.10. 'Due days' should be {0}, but it is {1}".format(context['followup_level_delay'] - 1, invoice_obj.follow_up_date_due_days))

-
  1.A.10. Checks that 1) there is not follow-up level associated to the invoice,
                     2) its follow-up level has not been handled,
                     3) its handling date is empty.
-
  !python {model: account.invoice}: |
    invoice_obj = self.browse(cr, uid, ref('account_invoice_1_A_10'))
    assert(not invoice_obj.followup_level_id), ("1.A.10. 'Follow-up Level' should be not set, but it is set to {0}.".format(invoice_obj.followup_level_id))
    assert(not invoice_obj.followup_level_handled), ("1.A.10. 'Follow-up Level Handled' should be not set, but it is set to {0}.".format(invoice_obj.followup_level_handled))
    assert(not invoice_obj.followup_level_date), ("1.A.10. 'Follow-up Handling Date' should be not set, but it is set to {0}.".format(invoice_obj.followup_level_date))

-
  1.A.10. Executes the scheduler which updates the follow-up levels.
-
  !python {model: account.invoice}: |
    self.cron_update_invoice_followup_level(cr, uid, context)

    # Stores the date in which the scheduler was called (today).
    from datetime import datetime
    context['date_followup_levels_were_updated'] = datetime.now().strftime("%Y-%m-%d")

-
  1.A.10. The field ‘Follow-Up Responsible’ in the account.invoice must be set with the responsible
          that was indicated in the corresponding follow-up level.
-
  !python {model: account.invoice}: |
    invoice_obj = self.browse(cr, uid, ref('account_invoice_1_A_10'), context)
    assert(invoice_obj.followup_responsible_id.id == context['manual_action_responsible_id']), ("Follow-up Responsible of the invoice should be {0}, but it was {1}".format(context['manual_action_responsible_id'], invoice_obj.followup_responsible_id.id))
-
  1.A.10. Rollbacks.
-
  !python {model: account.invoice}: |
    cr.execute("ROLLBACK TO SAVEPOINT test;")
