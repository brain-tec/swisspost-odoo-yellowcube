-
  Test discounts [FIXED + SUBTOTAL + PERCENTAGE + TAX EX]. 
-
  !record {model: account.invoice, id: account_invoice_6ex}:
    account_id: account.a_recv
    company_id: base.main_company
    currency_id: base.EUR
    invoice_line:
      - account_id: account.a_sale
        name: '[PCSC234] PC Assemble SC234'
        price_unit: 450.0
        quantity: 1.0
        product_id: product.product_product_3
        uos_id: product.product_uom_unit
        invoice_line_tax_id:
                  - __export__.account_tax_14
      - account_id: account.a_sale
        name: 'Brain-tec test-service'
        price_unit: 2500.0
        quantity: 1.0
        product_id: product.product_product_43
        uos_id: product.product_uom_unit
        invoice_line_tax_id:
                  - __export__.account_tax_14
    journal_id: account.bank_journal
    partner_id: base.res_partner_12
    reference_type: none
-
  I check that Initially customer invoice state is "Draft"
-
  !assert {model: account.invoice, id: account_invoice_6ex}:
    - state == 'draft'

-
  Create a discount invoice lines which value is percentage 10. sequence 1.
-
  !record {model: stage_discount.discount_line, id: discount_line_61}:
    discount_type: 'fixed'
    discount_value: 100
    sequence: 1
    description: 'Fixed Price'
    is_rounded: true
    invoice_id: account_invoice_6ex
-
  Create a discount invoice lines which value is percentage 10. sequence 2.
-
  !record {model: stage_discount.discount_line, id: discount_line_62}:
    discount_type: 'subtotal'
    sequence: 2
    description: 'Subtotal'
    invoice_id: account_invoice_6ex


-
  Create a discount invoice lines which value is percentage 10. sequence 2.
-
  !record {model: stage_discount.discount_line, id: discount_line_63ex}:
    discount_type: 'percentage'
    discount_value: 10
    sequence: 3
    description: 'Percentage'
    is_rounded: true
    invoice_id: account_invoice_6ex

-
  Calculate the discount
-
  !python {model: account.invoice}: |
    self.button_reset_taxes(cr, uid, [ref("account_invoice_6ex")])

-
  I check discount amount of 10% over subtotal of fixed price 100 â‚¬
-

  !assert {model: account.invoice, id: account_invoice_6ex}:
    - amount_discount == -385.0
    - amount_untaxed == 2565.0
    - amount_tax == 205.2
    - amount_total == 2770.2
-
  I Validate invoice by clicking on Validate button
-
  !workflow {model: account.invoice, action: invoice_open, ref: account_invoice_6ex}

-
  Check balance
-

  !assert {model: account.invoice, id: account_invoice_6ex}:
    - amount_discount == -385.0
    - amount_untaxed == 2565.0
    - amount_tax == 205.2
    - amount_total == 2770.2
    - residual  == 2770.2
 
-
  I verify that account move is created, and contains valid values.
-
  !python {model: account.invoice}: |
    inv = self.browse(cr, uid, ref('account_invoice_6ex'))
    move = inv.move_id
    assert(len(move.line_id) == 6), ('Only 6 lines should appear, but obtained', len(move.line_id))
    for line in move.line_id:
         assert(line.credit!=0 or line.debit!=0), ('Both lines cannot be 0')
         assert(line.debit in [0,2770.2,285.0, 100.0]), ('Debit can only belong to these values but it is:',line.debit)
         assert(line.credit in [0, 205.2,2500.0,450.0]), ('Credit can only belong to these values but it is:', line.credit)
         assert(line.state=='valid'), ('It should be in state valid')
 